//
// Created by shumo on 2019/5/10.
//

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <iostream>
#include "include/Struct.h"
#include "include/PoseEstimator.h"
/* Header for class com_seeta_sdk_PoseEstimation */

#ifndef _Included_com_seeta_sdk_PoseEstimation
#define _Included_com_seeta_sdk_PoseEstimation
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_seeta_sdk_PoseEstimation
 * Method:    construct
 * Signature: (Ljava/lang/String;)J
 *
 */
JNIEXPORT jlong JNICALL Java_com_seeta_sdk_PoseEstimation_construct
        (JNIEnv *env, jobject obj, jstring _model) {

    const char *model = env->GetStringUTFChars(_model, JNI_FALSE);
    seeta::ModelSetting::Device device = seeta::ModelSetting::AUTO;
    int id = 0;
    seeta::ModelSetting modelSetting(model, device, id);
    seeta::PoseEstimator poseEstimator(modelSetting);
    env->ReleaseStringUTFChars(_model, model);
    return (jlong) &poseEstimator;
} ;


char * ConvertJByteaArrayToChars(JNIEnv *env, jbyteArray bytearray) {
    char *chars = NULL;
    jbyte *bytes;
    bytes = env->GetByteArrayElements(bytearray, 0);
    int chars_len = env->GetArrayLength(bytearray);
    chars = new char[chars_len + 1];
    memset(chars, 0, chars_len + 1);
    memcpy(chars, bytes, chars_len);
    chars[chars_len] = 0;

    env->ReleaseByteArrayElements(bytearray, bytes, 0);

    return chars;
}

/*
 * Class:     com_seeta_sdk_PoseEstimation
 * Method:    poseEstimate
 * Signature: (JLcom/seeta/sdk/SeetaImageData;Lcom/seeta/sdk/SeetaRect;)[F
 */
JNIEXPORT jfloatArray JNICALL Java_com_seeta_sdk_PoseEstimation_poseEstimate
        (JNIEnv *env, jobject obj, jlong nativeObj, jint _width, jint _height, jint _channels, jbyteArray _data, jintArray _rect) {

    seeta::PoseEstimator *poseEstimator = reinterpret_cast<seeta::PoseEstimator *>(nativeObj);

//    jclass jcinfo = env->FindClass("com/seeta/sdk/SeetaImageData");
//    jfieldID jfwidth = env->GetFieldID(jcinfo, "width", "I");
//    jfieldID jfHeight = env->GetFieldID(jcinfo, "height", "I");
//    jfieldID jfChannel = env->GetFieldID(jcinfo, "channels", "I");
//    jfieldID jfData = env->GetFieldID(jcinfo, "data", "[B");
//
    SeetaImageData *seetaImageData = new SeetaImageData();
    seetaImageData->width = _width;
    seetaImageData->height = _height;
    seetaImageData->channels = _channels;
    seetaImageData->data = reinterpret_cast<unsigned char *>(ConvertJByteaArrayToChars(env, _data));

//    SeetaImageData seetaImageData;
//    seetaImageData.width = env->GetIntField(_seetaImageData, jfwidth);
//    seetaImageData.height = env->GetIntField(_seetaImageData, jfHeight);
//    seetaImageData.channels = env->GetIntField(_seetaImageData, jfChannel);
//
//    jbyteArray ja = (jbyteArray) env->GetObjectField(_seetaImageData, jfData);
//    int nArrLen = env->GetArrayLength(ja);
//    unsigned char *chArr = (unsigned char *) env->GetByteArrayElements(ja, 0);

//    std::cout<<"seetaImageData length"<<nArrLen<<std::endl;

//    for(int i=0;i<nArrLen;i++){
////        std::cout<<"seetaImageData"<<*(chArr+i)<<std::endl;
//    }
//    memcpy(seetaImageData.data, chArr, nArrLen);
//
//    if(NULL == &seetaImageData){
//        std::cout << "seetaImageData  null:" << std::endl;
//    }
//
//    if(NULL==&seetaImageData.height){
//        std::cout << "seetaImageData  height: null" << std::endl;
//    }
//
//    if(NULL==&seetaImageData.data){
//        std::cout << "seetaImageData  data: null"  << std::endl;
//    }

    SeetaRect *seetaRect = new SeetaRect();
    jint* rect = env->GetIntArrayElements(_rect,JNI_FALSE);
    seetaRect->x = rect[0];
    seetaRect->y = rect[1];
    seetaRect->width = rect[2];
    seetaRect->height = rect[3];

    env->ReleaseIntArrayElements(_rect,rect,0);


//    jclass jcinfoa = env->FindClass("com/seeta/sdk/SeetaRect");
//    jfieldID jfx = env->GetFieldID(jcinfoa, "x", "I");
//    jfieldID jfy = env->GetFieldID(jcinfoa, "y", "I");
//    jfieldID jfwidtha = env->GetFieldID(jcinfoa, "width", "I");
//    jfieldID jfHeigha = env->GetFieldID(jcinfoa, "height", "I");
//    seetaRect->x = env->GetIntField(_seetaRect, jfx);
//    seetaRect->y = env->GetIntField(_seetaRect, jfy);
//    seetaRect->width = env->GetIntField(_seetaRect, jfwidtha);
//    seetaRect->height = env->GetIntField(_seetaRect, jfHeigha);


    float yaw = 0.1;
    float pitch = 0.1;
    float roll = 0.1;
    poseEstimator->Estimate(*seetaImageData,*seetaRect,&yaw,&pitch,&roll);
    jfloatArray result;
    result = env->NewFloatArray(3);
    jfloat *elems = env->GetFloatArrayElements(result, JNI_FALSE);
    elems[0] = yaw;
    elems[1] = pitch;
    elems[2] = roll;
    env->ReleaseFloatArrayElements(result, elems, 0);
    return result;
} ;

/*
 * Class:     com_seeta_sdk_PoseEstimation
 * Method:    release
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_seeta_sdk_PoseEstimation_release
        (JNIEnv *env, jobject, jlong nativeObj) {

} ;

#ifdef __cplusplus
}
#endif
#endif
