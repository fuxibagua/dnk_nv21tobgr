//
// Created by shumo on 2019/5/11.
//
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <Struct.h>
#include "string.h"
#include <PoseEstimator.h>
#include <iostream>

#include <android/log.h>


/* Header for class com_seeta_sdk_PoseEstimation */

#ifndef _Included_com_seeta_sdk_PoseEstimation
#define _Included_com_seeta_sdk_PoseEstimation

#define LOG_TAG   "seetaImageData"
#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG,  __VA_ARGS__)
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)

#ifdef __cplusplus
extern "C" {
#endif

char * ConvertJByteaArrayToChars(JNIEnv *env, jbyteArray bytearray) ;
seeta::PoseEstimator *poseEstimator;
/*
 * Class:     com_seeta_sdk_PoseEstimation
 * Method:    construct
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_seeta_sdk_PoseEstimation_construct
        (JNIEnv *env, jobject obj, jstring _model){
    const char *model = env->GetStringUTFChars(_model, JNI_FALSE);
    seeta::ModelSetting::Device device = seeta::ModelSetting::AUTO;
    int id = 0;
    seeta::ModelSetting modelSetting(model, device, id);
    poseEstimator = new seeta::PoseEstimator(modelSetting);
    env->ReleaseStringUTFChars(_model, model);
    return (jlong)poseEstimator;
};

/*
 * Class:     com_seeta_sdk_PoseEstimation
 * Method:    poseEstimate
 * Signature: (JIII[B[I)[F
 */
JNIEXPORT jfloatArray JNICALL Java_com_seeta_sdk_PoseEstimation_poseEstimate
        (JNIEnv *env, jobject obj, jlong nativeObj, jint _width, jint _height, jint _channels, jbyteArray _data, jintArray _rect){
    seeta::PoseEstimator *poseEstimator = reinterpret_cast<seeta::PoseEstimator *>(nativeObj);
//
    SeetaImageData *seetaImageData = new SeetaImageData();
    seetaImageData->width = _width;
    seetaImageData->height = _height;
    seetaImageData->channels = _channels;
    jbyte * jbyte1 = env->GetByteArrayElements(_data,JNI_FALSE);
    seetaImageData->data = reinterpret_cast<unsigned char *>(jbyte1);

    env->ReleaseByteArrayElements(_data,jbyte1,0);
    LOGD("seetaImageData width %d",seetaImageData->width);
    LOGD("seetaImageData height %d",seetaImageData->height);
    LOGD("seetaImageData channels %d",seetaImageData->channels);
//    LOGD("seetaImageData data %d",seetaImageData->data[10000]);

    SeetaRect *seetaRect = new SeetaRect();
    jint* rect = env->GetIntArrayElements(_rect,JNI_FALSE);
    seetaRect->x = rect[0];
    seetaRect->y = rect[1];
    seetaRect->width = rect[2];
    seetaRect->height = rect[3];

    env->ReleaseIntArrayElements(_rect,rect,0);

    LOGD("seetaRect x %d",seetaRect->x);
    LOGD("seetaRect y %d",seetaRect->y);
    LOGD("seetaRect width %d",seetaRect->width);
    LOGD("seetaRect height %d",seetaRect->height);

    float yaw;
    float pitch;
    float roll;
    LOGD("YAW %d",&yaw);
    LOGD("poseEstimator %d",poseEstimator);
    poseEstimator->Estimate(*seetaImageData,*seetaRect,&yaw,&pitch,&roll);
    jfloatArray result = env->NewFloatArray(3);
    jfloat *elems = env->GetFloatArrayElements(result, JNI_FALSE);
    elems[0] = yaw;
    elems[1] = pitch;
    elems[2] = roll;
    env->ReleaseFloatArrayElements(result, elems, 0);
    return result;
//
//    float yaw = 0.1;
//    float pitch = 0.1;
//    float roll = 0.1;
//    poseEstimator->Estimate(*seetaImageData,*seetaRect,&yaw,&pitch,&roll);
//    jfloatArray result;
//    result = env->NewFloatArray(3);

//    return result;
};
//这个函数会造成内存泄漏
char * ConvertJByteaArrayToChars(JNIEnv *env, jbyteArray bytearray) {
    char *chars = NULL;
    jbyte *bytes;
    bytes = env->GetByteArrayElements(bytearray, 0);
    int chars_len = env->GetArrayLength(bytearray);
    chars = new char[chars_len + 1];
    memset(chars, 0, chars_len + 1);
    memcpy(chars, bytes, chars_len);
    chars[chars_len] = 0;

    env->ReleaseByteArrayElements(bytearray, bytes, 0);

    return chars;
}

/*
 * Class:     com_seeta_sdk_PoseEstimation
 * Method:    release
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_seeta_sdk_PoseEstimation_release
        (JNIEnv *env, jobject obj, jlong nativeObj){

};

#ifdef __cplusplus
}
#endif
#endif

